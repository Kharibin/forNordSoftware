'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unmap = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Turns a set of mapped <code>{@link https://github.com/Timer/stack-frame/tree/master/packages/stack-frame#stackframe StackFrame}</code>s back into their generated code position and enhances them with code.
 * @param {string} fileUri The URI of the <code>bundle.js</code> file.
 * @param {StackFrame[]} frames A set of <code>{@link https://github.com/Timer/stack-frame/tree/master/packages/stack-frame#stackframe StackFrame}</code>s which are already mapped and missing their generated positions.
 * @param {number} [fileContents=3] The number of lines to provide before and after the line specified in the <code>{@link https://github.com/Timer/stack-frame/tree/master/packages/stack-frame#stackframe StackFrame}</code>.
 */
var unmap = function () {
  var _ref = _asyncToGenerator(_regenerator2.default.mark(function _callee(fileUri, frames) {
    var contextLines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3;
    var fileContents, map;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            fileContents = (typeof fileUri === 'undefined' ? 'undefined' : _typeof(fileUri)) === 'object' ? fileUri.contents : null;

            fileUri = (typeof fileUri === 'undefined' ? 'undefined' : _typeof(fileUri)) === 'object' ? fileUri.uri : fileUri;

            if (!(fileContents == null)) {
              _context.next = 6;
              break;
            }

            _context.next = 5;
            return fetch(fileUri).then(function (res) {
              return res.text();
            });

          case 5:
            fileContents = _context.sent;

          case 6:
            _context.next = 8;
            return (0, _stackFrameUtils.getSourceMap)(fileUri, fileContents);

          case 8:
            map = _context.sent;
            return _context.abrupt('return', frames.map(function (frame) {
              var functionName = frame.functionName,
                  lineNumber = frame.lineNumber,
                  columnNumber = frame.columnNumber,
                  _originalLineNumber = frame._originalLineNumber;

              if (_originalLineNumber != null) {
                return frame;
              }
              var fileName = frame.fileName;

              if (fileName) fileName = _path2.default.normalize(fileName);
              var splitCache1 = {},
                  splitCache2 = {},
                  splitCache3 = {};
              var source = map.getSources().map(function (s) {
                return s.replace(/[\\]+/g, '/');
              }).filter(function (s) {
                s = _path2.default.normalize(s);
                return s.indexOf(fileName) === s.length - fileName.length;
              }).sort(function (a, b) {
                a = splitCache1[a] || (splitCache1[a] = a.split(_path2.default.sep));
                b = splitCache1[b] || (splitCache1[b] = b.split(_path2.default.sep));
                return Math.sign(a.length - b.length);
              }).sort(function (a, b) {
                a = splitCache2[a] || (splitCache2[a] = a.split('node_modules'));
                b = splitCache2[b] || (splitCache2[b] = b.split('node_modules'));
                return Math.sign(a.length - b.length);
              }).sort(function (a, b) {
                a = splitCache3[a] || (splitCache3[a] = a.split('~'));
                b = splitCache3[b] || (splitCache3[b] = b.split('~'));
                return Math.sign(a.length - b.length);
              });
              if (source.length < 1) {
                return new _stackFrame2.default(null, null, null, null, null, functionName, fileName, lineNumber, columnNumber, null);
              }

              var _map$getGeneratedPosi = map.getGeneratedPosition(source[0], lineNumber, columnNumber),
                  line = _map$getGeneratedPosi.line,
                  column = _map$getGeneratedPosi.column;

              var originalSource = map.getSource(source[0]);
              return new _stackFrame2.default(functionName, fileUri, line, column || null, (0, _stackFrameUtils.getLinesAround)(line, contextLines, fileContents), functionName, fileName, lineNumber, columnNumber, (0, _stackFrameUtils.getLinesAround)(lineNumber, contextLines, originalSource));
            }));

          case 10:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function unmap(_x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

var _stackFrame = require('stack-frame');

var _stackFrame2 = _interopRequireDefault(_stackFrame);

var _stackFrameUtils = require('stack-frame-utils');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.unmap = unmap;
exports.default = unmap;